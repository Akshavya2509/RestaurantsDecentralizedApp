struct FoodItem{
        uint256 id;
        string name;
        uint256 price;
        uint256 quantity;
        uint256 restaurantId;
    }
    
    mapping(uint256 => FoodItem) public foodItems;
    uint256 public nextId;
    
    event FoodItemAdded(uint256 id, string name, uint256 price, uint256 quantity, uint256 restaurantId);
    
    function addFoodItem(string memory _name, uint256 _price, uint256 _quantity, uint256 _restaurantId) public{
        foodItems[nextId] = FoodItem(nextId, _name, _price, _quantity, _restaurantId);
        nextId++;
        emit FoodItemAdded(nextId, _name, _price, _quantity, _restaurantId);
    }
    
    function getFoodItem(uint256 _id) public view returns(FoodItem memory){
        return foodItems[_id];
    }
    
    function getFoodItems() public view returns(FoodItem[] memory){
        FoodItem[] memory _foodItems = new FoodItem[](nextId);
        for(uint256 i = 0; i < nextId; i++){
            _foodItems[i] = foodItems[i];
        }
        return _foodItems;
    }
    
    function updateFoodItem(uint256 _id, string memory _name, uint256 _price, uint256 _quantity, uint256 _restaurantId) public{
        foodItems[_id] = FoodItem(_id, _name, _price, _quantity, _restaurantId);
    }
    
    function deleteFoodItem(uint256 _id) public{
        delete foodItems[_id];
    }
    
    function getFoodItemsByRestaurant(uint256 _restaurantId) public view returns(FoodItem[] memory){
        uint256 count = 0;
        for(uint256 i = 0; i < nextId; i++){
            if(foodItems[i].restaurantId == _restaurantId){
                count++;
            }
        }
        FoodItem[] memory _foodItems = new FoodItem[](count);
        uint256 j = 0;
        for(uint256 i = 0; i < nextId; i++){
            if(foodItems[i].restaurantId == _restaurantId){
                _foodItems[j] = foodItems[i];
                j++;
            }
        }
        return _foodItems;
    }
    
    function getFoodItemsByRestaurantAndName(uint256 _restaurantId